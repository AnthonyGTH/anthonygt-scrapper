#!/usr/bin/env python3
"""
Script privado para crear el usuario administrador √∫nico.
Solo debe ejecutarse una vez por el propietario.
"""

import os
import sys
import getpass
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from passlib.context import CryptContext
from dotenv import load_dotenv

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models import User, Base

# Load environment variables
load_dotenv()

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_admin_user():
    """Crear usuario administrador √∫nico"""
    print("üîê === CREACI√ìN DE USUARIO ADMINISTRADOR ===")
    print("‚ö†Ô∏è  ADVERTENCIA: Este script solo debe ejecutarse UNA VEZ")
    print("‚ö†Ô∏è  Las credenciales ser√°n las √∫nicas para acceder al sistema")
    print()
    
    # Database configuration
    DATABASE_URL = f"postgresql://{os.getenv('POSTGRES_USER')}:{os.getenv('POSTGRES_PASSWORD')}@{os.getenv('POSTGRES_HOST')}:{os.getenv('POSTGRES_PORT', 5432)}/{os.getenv('POSTGRES_DB')}"
    
    try:
        # Create database engine
        engine = create_engine(DATABASE_URL)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        
        # Create tables if they don't exist
        Base.metadata.create_all(bind=engine)
        
        db = SessionLocal()
        
        # Check if admin already exists
        existing_admin = db.query(User).filter(User.is_admin == True).first()
        if existing_admin:
            print("‚ùå Ya existe un usuario administrador en el sistema")
            print(f"   Usuario: {existing_admin.username}")
            print(f"   Email: {existing_admin.email}")
            print("   No se puede crear otro administrador")
            return False
        
        # Get admin credentials
        print("üìù Ingresa las credenciales del administrador:")
        print()
        
        username = input("üë§ Usuario: ").strip()
        if not username:
            print("‚ùå El usuario no puede estar vac√≠o")
            return False
        
        email = input("üìß Email: ").strip()
        if not email or "@" not in email:
            print("‚ùå Email inv√°lido")
            return False
        
        print()
        print("üîí Contrase√±a (m√≠nimo 12 caracteres, debe ser muy segura):")
        password = getpass.getpass("   Contrase√±a: ")
        if len(password) < 12:
            print("‚ùå La contrase√±a debe tener al menos 12 caracteres")
            return False
        
        password_confirm = getpass.getpass("   Confirmar contrase√±a: ")
        if password != password_confirm:
            print("‚ùå Las contrase√±as no coinciden")
            return False
        
        # Hash password
        hashed_password = pwd_context.hash(password)
        
        # Create admin user
        admin_user = User(
            username=username,
            email=email,
            hashed_password=hashed_password,
            is_active=True,
            is_admin=True,
            created_at=datetime.utcnow()
        )
        
        db.add(admin_user)
        db.commit()
        
        print()
        print("‚úÖ Usuario administrador creado exitosamente!")
        print(f"   Usuario: {username}")
        print(f"   Email: {email}")
        print(f"   Creado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        print("üîê IMPORTANTE:")
        print("   - Guarda estas credenciales en un lugar seguro")
        print("   - No las compartas con nadie")
        print("   - Son las √∫nicas credenciales para acceder al sistema")
        print("   - Si las pierdes, tendr√°s que resetear la base de datos")
        print()
        print("üöÄ El sistema est√° listo para usar")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando usuario administrador: {e}")
        return False
    finally:
        if 'db' in locals():
            db.close()

if __name__ == "__main__":
    success = create_admin_user()
    if not success:
        sys.exit(1)